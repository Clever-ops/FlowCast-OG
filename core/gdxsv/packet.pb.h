// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packet_2eproto;
namespace proto {
class BattleMessage;
class BattleMessageDefaultTypeInternal;
extern BattleMessageDefaultTypeInternal _BattleMessage_default_instance_;
class FinMessage;
class FinMessageDefaultTypeInternal;
extern FinMessageDefaultTypeInternal _FinMessage_default_instance_;
class HelloServerMessage;
class HelloServerMessageDefaultTypeInternal;
extern HelloServerMessageDefaultTypeInternal _HelloServerMessage_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class PingMessage;
class PingMessageDefaultTypeInternal;
extern PingMessageDefaultTypeInternal _PingMessage_default_instance_;
class PongMessage;
class PongMessageDefaultTypeInternal;
extern PongMessageDefaultTypeInternal _PongMessage_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::BattleMessage* Arena::CreateMaybeMessage<::proto::BattleMessage>(Arena*);
template<> ::proto::FinMessage* Arena::CreateMaybeMessage<::proto::FinMessage>(Arena*);
template<> ::proto::HelloServerMessage* Arena::CreateMaybeMessage<::proto::HelloServerMessage>(Arena*);
template<> ::proto::Packet* Arena::CreateMaybeMessage<::proto::Packet>(Arena*);
template<> ::proto::PingMessage* Arena::CreateMaybeMessage<::proto::PingMessage>(Arena*);
template<> ::proto::PongMessage* Arena::CreateMaybeMessage<::proto::PongMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum MessageType : int {
  None = 0,
  HelloServer = 1,
  Ping = 2,
  Pong = 3,
  Battle = 4,
  Fin = 5,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = None;
constexpr MessageType MessageType_MAX = Fin;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class BattleMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BattleMessage) */ {
 public:
  inline BattleMessage() : BattleMessage(nullptr) {}
  virtual ~BattleMessage();

  BattleMessage(const BattleMessage& from);
  BattleMessage(BattleMessage&& from) noexcept
    : BattleMessage() {
    *this = ::std::move(from);
  }

  inline BattleMessage& operator=(const BattleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleMessage& operator=(BattleMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleMessage* internal_default_instance() {
    return reinterpret_cast<const BattleMessage*>(
               &_BattleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BattleMessage& a, BattleMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleMessage* New() const final {
    return CreateMaybeMessage<BattleMessage>(nullptr);
  }

  BattleMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleMessage& from);
  void MergeFrom(const BattleMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BattleMessage";
  }
  protected:
  explicit BattleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kBodyFieldNumber = 3,
    kSeqFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes body = 3;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // uint32 seq = 2;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BattleMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class PingMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PingMessage) */ {
 public:
  inline PingMessage() : PingMessage(nullptr) {}
  virtual ~PingMessage();

  PingMessage(const PingMessage& from);
  PingMessage(PingMessage&& from) noexcept
    : PingMessage() {
    *this = ::std::move(from);
  }

  inline PingMessage& operator=(const PingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingMessage& operator=(PingMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingMessage* internal_default_instance() {
    return reinterpret_cast<const PingMessage*>(
               &_PingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PingMessage& a, PingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PingMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingMessage* New() const final {
    return CreateMaybeMessage<PingMessage>(nullptr);
  }

  PingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingMessage& from);
  void MergeFrom(const PingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PingMessage";
  }
  protected:
  explicit PingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PingMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class PongMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PongMessage) */ {
 public:
  inline PongMessage() : PongMessage(nullptr) {}
  virtual ~PongMessage();

  PongMessage(const PongMessage& from);
  PongMessage(PongMessage&& from) noexcept
    : PongMessage() {
    *this = ::std::move(from);
  }

  inline PongMessage& operator=(const PongMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PongMessage& operator=(PongMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PongMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PongMessage* internal_default_instance() {
    return reinterpret_cast<const PongMessage*>(
               &_PongMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PongMessage& a, PongMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PongMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PongMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PongMessage* New() const final {
    return CreateMaybeMessage<PongMessage>(nullptr);
  }

  PongMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PongMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PongMessage& from);
  void MergeFrom(const PongMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PongMessage";
  }
  protected:
  explicit PongMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kPublicAddrFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string public_addr = 3;
  void clear_public_addr();
  const std::string& public_addr() const;
  void set_public_addr(const std::string& value);
  void set_public_addr(std::string&& value);
  void set_public_addr(const char* value);
  void set_public_addr(const char* value, size_t size);
  std::string* mutable_public_addr();
  std::string* release_public_addr();
  void set_allocated_public_addr(std::string* public_addr);
  private:
  const std::string& _internal_public_addr() const;
  void _internal_set_public_addr(const std::string& value);
  std::string* _internal_mutable_public_addr();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PongMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class HelloServerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.HelloServerMessage) */ {
 public:
  inline HelloServerMessage() : HelloServerMessage(nullptr) {}
  virtual ~HelloServerMessage();

  HelloServerMessage(const HelloServerMessage& from);
  HelloServerMessage(HelloServerMessage&& from) noexcept
    : HelloServerMessage() {
    *this = ::std::move(from);
  }

  inline HelloServerMessage& operator=(const HelloServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloServerMessage& operator=(HelloServerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloServerMessage* internal_default_instance() {
    return reinterpret_cast<const HelloServerMessage*>(
               &_HelloServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HelloServerMessage& a, HelloServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloServerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloServerMessage* New() const final {
    return CreateMaybeMessage<HelloServerMessage>(nullptr);
  }

  HelloServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloServerMessage& from);
  void MergeFrom(const HelloServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.HelloServerMessage";
  }
  protected:
  explicit HelloServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdDeprecatedFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kOkFieldNumber = 2,
  };
  // string session_id_deprecated = 1;
  void clear_session_id_deprecated();
  const std::string& session_id_deprecated() const;
  void set_session_id_deprecated(const std::string& value);
  void set_session_id_deprecated(std::string&& value);
  void set_session_id_deprecated(const char* value);
  void set_session_id_deprecated(const char* value, size_t size);
  std::string* mutable_session_id_deprecated();
  std::string* release_session_id_deprecated();
  void set_allocated_session_id_deprecated(std::string* session_id_deprecated);
  private:
  const std::string& _internal_session_id_deprecated() const;
  void _internal_set_session_id_deprecated(const std::string& value);
  std::string* _internal_mutable_session_id_deprecated();
  public:

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bool ok = 2;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.HelloServerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_deprecated_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class FinMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FinMessage) */ {
 public:
  inline FinMessage() : FinMessage(nullptr) {}
  virtual ~FinMessage();

  FinMessage(const FinMessage& from);
  FinMessage(FinMessage&& from) noexcept
    : FinMessage() {
    *this = ::std::move(from);
  }

  inline FinMessage& operator=(const FinMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinMessage& operator=(FinMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FinMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinMessage* internal_default_instance() {
    return reinterpret_cast<const FinMessage*>(
               &_FinMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FinMessage& a, FinMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FinMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinMessage* New() const final {
    return CreateMaybeMessage<FinMessage>(nullptr);
  }

  FinMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FinMessage& from);
  void MergeFrom(const FinMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FinMessage";
  }
  protected:
  explicit FinMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 1,
  };
  // string detail = 1;
  void clear_detail();
  const std::string& detail() const;
  void set_detail(const std::string& value);
  void set_detail(std::string&& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  std::string* mutable_detail();
  std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // @@protoc_insertion_point(class_scope:proto.FinMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleDataFieldNumber = 13,
    kSessionIdFieldNumber = 5,
    kHelloServerDataFieldNumber = 10,
    kPingDataFieldNumber = 11,
    kPongDataFieldNumber = 12,
    kFinDataFieldNumber = 14,
    kTypeFieldNumber = 1,
    kSeqFieldNumber = 2,
    kAckFieldNumber = 3,
  };
  // repeated .proto.BattleMessage battle_data = 13;
  int battle_data_size() const;
  private:
  int _internal_battle_data_size() const;
  public:
  void clear_battle_data();
  ::proto::BattleMessage* mutable_battle_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >*
      mutable_battle_data();
  private:
  const ::proto::BattleMessage& _internal_battle_data(int index) const;
  ::proto::BattleMessage* _internal_add_battle_data();
  public:
  const ::proto::BattleMessage& battle_data(int index) const;
  ::proto::BattleMessage* add_battle_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >&
      battle_data() const;

  // string session_id = 5;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .proto.HelloServerMessage hello_server_data = 10;
  bool has_hello_server_data() const;
  private:
  bool _internal_has_hello_server_data() const;
  public:
  void clear_hello_server_data();
  const ::proto::HelloServerMessage& hello_server_data() const;
  ::proto::HelloServerMessage* release_hello_server_data();
  ::proto::HelloServerMessage* mutable_hello_server_data();
  void set_allocated_hello_server_data(::proto::HelloServerMessage* hello_server_data);
  private:
  const ::proto::HelloServerMessage& _internal_hello_server_data() const;
  ::proto::HelloServerMessage* _internal_mutable_hello_server_data();
  public:
  void unsafe_arena_set_allocated_hello_server_data(
      ::proto::HelloServerMessage* hello_server_data);
  ::proto::HelloServerMessage* unsafe_arena_release_hello_server_data();

  // .proto.PingMessage ping_data = 11;
  bool has_ping_data() const;
  private:
  bool _internal_has_ping_data() const;
  public:
  void clear_ping_data();
  const ::proto::PingMessage& ping_data() const;
  ::proto::PingMessage* release_ping_data();
  ::proto::PingMessage* mutable_ping_data();
  void set_allocated_ping_data(::proto::PingMessage* ping_data);
  private:
  const ::proto::PingMessage& _internal_ping_data() const;
  ::proto::PingMessage* _internal_mutable_ping_data();
  public:
  void unsafe_arena_set_allocated_ping_data(
      ::proto::PingMessage* ping_data);
  ::proto::PingMessage* unsafe_arena_release_ping_data();

  // .proto.PongMessage pong_data = 12;
  bool has_pong_data() const;
  private:
  bool _internal_has_pong_data() const;
  public:
  void clear_pong_data();
  const ::proto::PongMessage& pong_data() const;
  ::proto::PongMessage* release_pong_data();
  ::proto::PongMessage* mutable_pong_data();
  void set_allocated_pong_data(::proto::PongMessage* pong_data);
  private:
  const ::proto::PongMessage& _internal_pong_data() const;
  ::proto::PongMessage* _internal_mutable_pong_data();
  public:
  void unsafe_arena_set_allocated_pong_data(
      ::proto::PongMessage* pong_data);
  ::proto::PongMessage* unsafe_arena_release_pong_data();

  // .proto.FinMessage fin_data = 14;
  bool has_fin_data() const;
  private:
  bool _internal_has_fin_data() const;
  public:
  void clear_fin_data();
  const ::proto::FinMessage& fin_data() const;
  ::proto::FinMessage* release_fin_data();
  ::proto::FinMessage* mutable_fin_data();
  void set_allocated_fin_data(::proto::FinMessage* fin_data);
  private:
  const ::proto::FinMessage& _internal_fin_data() const;
  ::proto::FinMessage* _internal_mutable_fin_data();
  public:
  void unsafe_arena_set_allocated_fin_data(
      ::proto::FinMessage* fin_data);
  ::proto::FinMessage* unsafe_arena_release_fin_data();

  // .proto.MessageType type = 1;
  void clear_type();
  ::proto::MessageType type() const;
  void set_type(::proto::MessageType value);
  private:
  ::proto::MessageType _internal_type() const;
  void _internal_set_type(::proto::MessageType value);
  public:

  // uint32 seq = 2;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ack = 3;
  void clear_ack();
  ::PROTOBUF_NAMESPACE_ID::uint32 ack() const;
  void set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ack() const;
  void _internal_set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage > battle_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::proto::HelloServerMessage* hello_server_data_;
  ::proto::PingMessage* ping_data_;
  ::proto::PongMessage* pong_data_;
  ::proto::FinMessage* fin_data_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BattleMessage

// string user_id = 1;
inline void BattleMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleMessage::user_id() const {
  // @@protoc_insertion_point(field_get:proto.BattleMessage.user_id)
  return _internal_user_id();
}
inline void BattleMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.BattleMessage.user_id)
}
inline std::string* BattleMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.BattleMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& BattleMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void BattleMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleMessage.user_id)
}
inline void BattleMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleMessage.user_id)
}
inline void BattleMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleMessage.user_id)
}
inline std::string* BattleMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.BattleMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleMessage.user_id)
}

// uint32 seq = 2;
inline void BattleMessage::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleMessage::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleMessage::seq() const {
  // @@protoc_insertion_point(field_get:proto.BattleMessage.seq)
  return _internal_seq();
}
inline void BattleMessage::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
}
inline void BattleMessage::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:proto.BattleMessage.seq)
}

// bytes body = 3;
inline void BattleMessage::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleMessage::body() const {
  // @@protoc_insertion_point(field_get:proto.BattleMessage.body)
  return _internal_body();
}
inline void BattleMessage::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:proto.BattleMessage.body)
}
inline std::string* BattleMessage::mutable_body() {
  // @@protoc_insertion_point(field_mutable:proto.BattleMessage.body)
  return _internal_mutable_body();
}
inline const std::string& BattleMessage::_internal_body() const {
  return body_.Get();
}
inline void BattleMessage::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleMessage::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleMessage.body)
}
inline void BattleMessage::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleMessage.body)
}
inline void BattleMessage::set_body(const void* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleMessage.body)
}
inline std::string* BattleMessage::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleMessage::release_body() {
  // @@protoc_insertion_point(field_release:proto.BattleMessage.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleMessage::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleMessage.body)
}

// -------------------------------------------------------------------

// PingMessage

// int64 timestamp = 1;
inline void PingMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PingMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PingMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.PingMessage.timestamp)
  return _internal_timestamp();
}
inline void PingMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void PingMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.PingMessage.timestamp)
}

// string user_id = 2;
inline void PingMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PingMessage::user_id() const {
  // @@protoc_insertion_point(field_get:proto.PingMessage.user_id)
  return _internal_user_id();
}
inline void PingMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.PingMessage.user_id)
}
inline std::string* PingMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.PingMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& PingMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void PingMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PingMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.PingMessage.user_id)
}
inline void PingMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.PingMessage.user_id)
}
inline void PingMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.PingMessage.user_id)
}
inline std::string* PingMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PingMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.PingMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PingMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.PingMessage.user_id)
}

// -------------------------------------------------------------------

// PongMessage

// int64 timestamp = 1;
inline void PongMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PongMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PongMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.PongMessage.timestamp)
  return _internal_timestamp();
}
inline void PongMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void PongMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.PongMessage.timestamp)
}

// string user_id = 2;
inline void PongMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PongMessage::user_id() const {
  // @@protoc_insertion_point(field_get:proto.PongMessage.user_id)
  return _internal_user_id();
}
inline void PongMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.PongMessage.user_id)
}
inline std::string* PongMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.PongMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& PongMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void PongMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PongMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.PongMessage.user_id)
}
inline void PongMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.PongMessage.user_id)
}
inline void PongMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.PongMessage.user_id)
}
inline std::string* PongMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PongMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.PongMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PongMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.PongMessage.user_id)
}

// string public_addr = 3;
inline void PongMessage::clear_public_addr() {
  public_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PongMessage::public_addr() const {
  // @@protoc_insertion_point(field_get:proto.PongMessage.public_addr)
  return _internal_public_addr();
}
inline void PongMessage::set_public_addr(const std::string& value) {
  _internal_set_public_addr(value);
  // @@protoc_insertion_point(field_set:proto.PongMessage.public_addr)
}
inline std::string* PongMessage::mutable_public_addr() {
  // @@protoc_insertion_point(field_mutable:proto.PongMessage.public_addr)
  return _internal_mutable_public_addr();
}
inline const std::string& PongMessage::_internal_public_addr() const {
  return public_addr_.Get();
}
inline void PongMessage::_internal_set_public_addr(const std::string& value) {
  
  public_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PongMessage::set_public_addr(std::string&& value) {
  
  public_addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.PongMessage.public_addr)
}
inline void PongMessage::set_public_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.PongMessage.public_addr)
}
inline void PongMessage::set_public_addr(const char* value,
    size_t size) {
  
  public_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.PongMessage.public_addr)
}
inline std::string* PongMessage::_internal_mutable_public_addr() {
  
  return public_addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PongMessage::release_public_addr() {
  // @@protoc_insertion_point(field_release:proto.PongMessage.public_addr)
  return public_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PongMessage::set_allocated_public_addr(std::string* public_addr) {
  if (public_addr != nullptr) {
    
  } else {
    
  }
  public_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.PongMessage.public_addr)
}

// -------------------------------------------------------------------

// HelloServerMessage

// string session_id_deprecated = 1;
inline void HelloServerMessage::clear_session_id_deprecated() {
  session_id_deprecated_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HelloServerMessage::session_id_deprecated() const {
  // @@protoc_insertion_point(field_get:proto.HelloServerMessage.session_id_deprecated)
  return _internal_session_id_deprecated();
}
inline void HelloServerMessage::set_session_id_deprecated(const std::string& value) {
  _internal_set_session_id_deprecated(value);
  // @@protoc_insertion_point(field_set:proto.HelloServerMessage.session_id_deprecated)
}
inline std::string* HelloServerMessage::mutable_session_id_deprecated() {
  // @@protoc_insertion_point(field_mutable:proto.HelloServerMessage.session_id_deprecated)
  return _internal_mutable_session_id_deprecated();
}
inline const std::string& HelloServerMessage::_internal_session_id_deprecated() const {
  return session_id_deprecated_.Get();
}
inline void HelloServerMessage::_internal_set_session_id_deprecated(const std::string& value) {
  
  session_id_deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HelloServerMessage::set_session_id_deprecated(std::string&& value) {
  
  session_id_deprecated_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.HelloServerMessage.session_id_deprecated)
}
inline void HelloServerMessage::set_session_id_deprecated(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.HelloServerMessage.session_id_deprecated)
}
inline void HelloServerMessage::set_session_id_deprecated(const char* value,
    size_t size) {
  
  session_id_deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.HelloServerMessage.session_id_deprecated)
}
inline std::string* HelloServerMessage::_internal_mutable_session_id_deprecated() {
  
  return session_id_deprecated_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HelloServerMessage::release_session_id_deprecated() {
  // @@protoc_insertion_point(field_release:proto.HelloServerMessage.session_id_deprecated)
  return session_id_deprecated_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloServerMessage::set_allocated_session_id_deprecated(std::string* session_id_deprecated) {
  if (session_id_deprecated != nullptr) {
    
  } else {
    
  }
  session_id_deprecated_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id_deprecated,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.HelloServerMessage.session_id_deprecated)
}

// bool ok = 2;
inline void HelloServerMessage::clear_ok() {
  ok_ = false;
}
inline bool HelloServerMessage::_internal_ok() const {
  return ok_;
}
inline bool HelloServerMessage::ok() const {
  // @@protoc_insertion_point(field_get:proto.HelloServerMessage.ok)
  return _internal_ok();
}
inline void HelloServerMessage::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void HelloServerMessage::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:proto.HelloServerMessage.ok)
}

// string user_id = 3;
inline void HelloServerMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HelloServerMessage::user_id() const {
  // @@protoc_insertion_point(field_get:proto.HelloServerMessage.user_id)
  return _internal_user_id();
}
inline void HelloServerMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.HelloServerMessage.user_id)
}
inline std::string* HelloServerMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.HelloServerMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& HelloServerMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void HelloServerMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HelloServerMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.HelloServerMessage.user_id)
}
inline void HelloServerMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.HelloServerMessage.user_id)
}
inline void HelloServerMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.HelloServerMessage.user_id)
}
inline std::string* HelloServerMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HelloServerMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.HelloServerMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloServerMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.HelloServerMessage.user_id)
}

// -------------------------------------------------------------------

// FinMessage

// string detail = 1;
inline void FinMessage::clear_detail() {
  detail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FinMessage::detail() const {
  // @@protoc_insertion_point(field_get:proto.FinMessage.detail)
  return _internal_detail();
}
inline void FinMessage::set_detail(const std::string& value) {
  _internal_set_detail(value);
  // @@protoc_insertion_point(field_set:proto.FinMessage.detail)
}
inline std::string* FinMessage::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:proto.FinMessage.detail)
  return _internal_mutable_detail();
}
inline const std::string& FinMessage::_internal_detail() const {
  return detail_.Get();
}
inline void FinMessage::_internal_set_detail(const std::string& value) {
  
  detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FinMessage::set_detail(std::string&& value) {
  
  detail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.FinMessage.detail)
}
inline void FinMessage::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.FinMessage.detail)
}
inline void FinMessage::set_detail(const char* value,
    size_t size) {
  
  detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.FinMessage.detail)
}
inline std::string* FinMessage::_internal_mutable_detail() {
  
  return detail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FinMessage::release_detail() {
  // @@protoc_insertion_point(field_release:proto.FinMessage.detail)
  return detail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FinMessage::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.FinMessage.detail)
}

// -------------------------------------------------------------------

// Packet

// .proto.MessageType type = 1;
inline void Packet::clear_type() {
  type_ = 0;
}
inline ::proto::MessageType Packet::_internal_type() const {
  return static_cast< ::proto::MessageType >(type_);
}
inline ::proto::MessageType Packet::type() const {
  // @@protoc_insertion_point(field_get:proto.Packet.type)
  return _internal_type();
}
inline void Packet::_internal_set_type(::proto::MessageType value) {
  
  type_ = value;
}
inline void Packet::set_type(::proto::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.Packet.type)
}

// uint32 seq = 2;
inline void Packet::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::seq() const {
  // @@protoc_insertion_point(field_get:proto.Packet.seq)
  return _internal_seq();
}
inline void Packet::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
}
inline void Packet::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:proto.Packet.seq)
}

// uint32 ack = 3;
inline void Packet::clear_ack() {
  ack_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::_internal_ack() const {
  return ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::ack() const {
  // @@protoc_insertion_point(field_get:proto.Packet.ack)
  return _internal_ack();
}
inline void Packet::_internal_set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ack_ = value;
}
inline void Packet::set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:proto.Packet.ack)
}

// string session_id = 5;
inline void Packet::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Packet::session_id() const {
  // @@protoc_insertion_point(field_get:proto.Packet.session_id)
  return _internal_session_id();
}
inline void Packet::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:proto.Packet.session_id)
}
inline std::string* Packet::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:proto.Packet.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& Packet::_internal_session_id() const {
  return session_id_.Get();
}
inline void Packet::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Packet::set_session_id(std::string&& value) {
  
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Packet.session_id)
}
inline void Packet::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Packet.session_id)
}
inline void Packet::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Packet.session_id)
}
inline std::string* Packet::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Packet::release_session_id() {
  // @@protoc_insertion_point(field_release:proto.Packet.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Packet::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Packet.session_id)
}

// .proto.HelloServerMessage hello_server_data = 10;
inline bool Packet::_internal_has_hello_server_data() const {
  return this != internal_default_instance() && hello_server_data_ != nullptr;
}
inline bool Packet::has_hello_server_data() const {
  return _internal_has_hello_server_data();
}
inline void Packet::clear_hello_server_data() {
  if (GetArena() == nullptr && hello_server_data_ != nullptr) {
    delete hello_server_data_;
  }
  hello_server_data_ = nullptr;
}
inline const ::proto::HelloServerMessage& Packet::_internal_hello_server_data() const {
  const ::proto::HelloServerMessage* p = hello_server_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::HelloServerMessage*>(
      &::proto::_HelloServerMessage_default_instance_);
}
inline const ::proto::HelloServerMessage& Packet::hello_server_data() const {
  // @@protoc_insertion_point(field_get:proto.Packet.hello_server_data)
  return _internal_hello_server_data();
}
inline void Packet::unsafe_arena_set_allocated_hello_server_data(
    ::proto::HelloServerMessage* hello_server_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hello_server_data_);
  }
  hello_server_data_ = hello_server_data;
  if (hello_server_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Packet.hello_server_data)
}
inline ::proto::HelloServerMessage* Packet::release_hello_server_data() {
  
  ::proto::HelloServerMessage* temp = hello_server_data_;
  hello_server_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::HelloServerMessage* Packet::unsafe_arena_release_hello_server_data() {
  // @@protoc_insertion_point(field_release:proto.Packet.hello_server_data)
  
  ::proto::HelloServerMessage* temp = hello_server_data_;
  hello_server_data_ = nullptr;
  return temp;
}
inline ::proto::HelloServerMessage* Packet::_internal_mutable_hello_server_data() {
  
  if (hello_server_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::HelloServerMessage>(GetArena());
    hello_server_data_ = p;
  }
  return hello_server_data_;
}
inline ::proto::HelloServerMessage* Packet::mutable_hello_server_data() {
  // @@protoc_insertion_point(field_mutable:proto.Packet.hello_server_data)
  return _internal_mutable_hello_server_data();
}
inline void Packet::set_allocated_hello_server_data(::proto::HelloServerMessage* hello_server_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hello_server_data_;
  }
  if (hello_server_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hello_server_data);
    if (message_arena != submessage_arena) {
      hello_server_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hello_server_data, submessage_arena);
    }
    
  } else {
    
  }
  hello_server_data_ = hello_server_data;
  // @@protoc_insertion_point(field_set_allocated:proto.Packet.hello_server_data)
}

// .proto.PingMessage ping_data = 11;
inline bool Packet::_internal_has_ping_data() const {
  return this != internal_default_instance() && ping_data_ != nullptr;
}
inline bool Packet::has_ping_data() const {
  return _internal_has_ping_data();
}
inline void Packet::clear_ping_data() {
  if (GetArena() == nullptr && ping_data_ != nullptr) {
    delete ping_data_;
  }
  ping_data_ = nullptr;
}
inline const ::proto::PingMessage& Packet::_internal_ping_data() const {
  const ::proto::PingMessage* p = ping_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::PingMessage*>(
      &::proto::_PingMessage_default_instance_);
}
inline const ::proto::PingMessage& Packet::ping_data() const {
  // @@protoc_insertion_point(field_get:proto.Packet.ping_data)
  return _internal_ping_data();
}
inline void Packet::unsafe_arena_set_allocated_ping_data(
    ::proto::PingMessage* ping_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_data_);
  }
  ping_data_ = ping_data;
  if (ping_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Packet.ping_data)
}
inline ::proto::PingMessage* Packet::release_ping_data() {
  
  ::proto::PingMessage* temp = ping_data_;
  ping_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::PingMessage* Packet::unsafe_arena_release_ping_data() {
  // @@protoc_insertion_point(field_release:proto.Packet.ping_data)
  
  ::proto::PingMessage* temp = ping_data_;
  ping_data_ = nullptr;
  return temp;
}
inline ::proto::PingMessage* Packet::_internal_mutable_ping_data() {
  
  if (ping_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PingMessage>(GetArena());
    ping_data_ = p;
  }
  return ping_data_;
}
inline ::proto::PingMessage* Packet::mutable_ping_data() {
  // @@protoc_insertion_point(field_mutable:proto.Packet.ping_data)
  return _internal_mutable_ping_data();
}
inline void Packet::set_allocated_ping_data(::proto::PingMessage* ping_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ping_data_;
  }
  if (ping_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping_data);
    if (message_arena != submessage_arena) {
      ping_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_data, submessage_arena);
    }
    
  } else {
    
  }
  ping_data_ = ping_data;
  // @@protoc_insertion_point(field_set_allocated:proto.Packet.ping_data)
}

// .proto.PongMessage pong_data = 12;
inline bool Packet::_internal_has_pong_data() const {
  return this != internal_default_instance() && pong_data_ != nullptr;
}
inline bool Packet::has_pong_data() const {
  return _internal_has_pong_data();
}
inline void Packet::clear_pong_data() {
  if (GetArena() == nullptr && pong_data_ != nullptr) {
    delete pong_data_;
  }
  pong_data_ = nullptr;
}
inline const ::proto::PongMessage& Packet::_internal_pong_data() const {
  const ::proto::PongMessage* p = pong_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::PongMessage*>(
      &::proto::_PongMessage_default_instance_);
}
inline const ::proto::PongMessage& Packet::pong_data() const {
  // @@protoc_insertion_point(field_get:proto.Packet.pong_data)
  return _internal_pong_data();
}
inline void Packet::unsafe_arena_set_allocated_pong_data(
    ::proto::PongMessage* pong_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pong_data_);
  }
  pong_data_ = pong_data;
  if (pong_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Packet.pong_data)
}
inline ::proto::PongMessage* Packet::release_pong_data() {
  
  ::proto::PongMessage* temp = pong_data_;
  pong_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::PongMessage* Packet::unsafe_arena_release_pong_data() {
  // @@protoc_insertion_point(field_release:proto.Packet.pong_data)
  
  ::proto::PongMessage* temp = pong_data_;
  pong_data_ = nullptr;
  return temp;
}
inline ::proto::PongMessage* Packet::_internal_mutable_pong_data() {
  
  if (pong_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PongMessage>(GetArena());
    pong_data_ = p;
  }
  return pong_data_;
}
inline ::proto::PongMessage* Packet::mutable_pong_data() {
  // @@protoc_insertion_point(field_mutable:proto.Packet.pong_data)
  return _internal_mutable_pong_data();
}
inline void Packet::set_allocated_pong_data(::proto::PongMessage* pong_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pong_data_;
  }
  if (pong_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pong_data);
    if (message_arena != submessage_arena) {
      pong_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pong_data, submessage_arena);
    }
    
  } else {
    
  }
  pong_data_ = pong_data;
  // @@protoc_insertion_point(field_set_allocated:proto.Packet.pong_data)
}

// repeated .proto.BattleMessage battle_data = 13;
inline int Packet::_internal_battle_data_size() const {
  return battle_data_.size();
}
inline int Packet::battle_data_size() const {
  return _internal_battle_data_size();
}
inline void Packet::clear_battle_data() {
  battle_data_.Clear();
}
inline ::proto::BattleMessage* Packet::mutable_battle_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Packet.battle_data)
  return battle_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >*
Packet::mutable_battle_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.Packet.battle_data)
  return &battle_data_;
}
inline const ::proto::BattleMessage& Packet::_internal_battle_data(int index) const {
  return battle_data_.Get(index);
}
inline const ::proto::BattleMessage& Packet::battle_data(int index) const {
  // @@protoc_insertion_point(field_get:proto.Packet.battle_data)
  return _internal_battle_data(index);
}
inline ::proto::BattleMessage* Packet::_internal_add_battle_data() {
  return battle_data_.Add();
}
inline ::proto::BattleMessage* Packet::add_battle_data() {
  // @@protoc_insertion_point(field_add:proto.Packet.battle_data)
  return _internal_add_battle_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >&
Packet::battle_data() const {
  // @@protoc_insertion_point(field_list:proto.Packet.battle_data)
  return battle_data_;
}

// .proto.FinMessage fin_data = 14;
inline bool Packet::_internal_has_fin_data() const {
  return this != internal_default_instance() && fin_data_ != nullptr;
}
inline bool Packet::has_fin_data() const {
  return _internal_has_fin_data();
}
inline void Packet::clear_fin_data() {
  if (GetArena() == nullptr && fin_data_ != nullptr) {
    delete fin_data_;
  }
  fin_data_ = nullptr;
}
inline const ::proto::FinMessage& Packet::_internal_fin_data() const {
  const ::proto::FinMessage* p = fin_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::FinMessage*>(
      &::proto::_FinMessage_default_instance_);
}
inline const ::proto::FinMessage& Packet::fin_data() const {
  // @@protoc_insertion_point(field_get:proto.Packet.fin_data)
  return _internal_fin_data();
}
inline void Packet::unsafe_arena_set_allocated_fin_data(
    ::proto::FinMessage* fin_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fin_data_);
  }
  fin_data_ = fin_data;
  if (fin_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Packet.fin_data)
}
inline ::proto::FinMessage* Packet::release_fin_data() {
  
  ::proto::FinMessage* temp = fin_data_;
  fin_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::FinMessage* Packet::unsafe_arena_release_fin_data() {
  // @@protoc_insertion_point(field_release:proto.Packet.fin_data)
  
  ::proto::FinMessage* temp = fin_data_;
  fin_data_ = nullptr;
  return temp;
}
inline ::proto::FinMessage* Packet::_internal_mutable_fin_data() {
  
  if (fin_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FinMessage>(GetArena());
    fin_data_ = p;
  }
  return fin_data_;
}
inline ::proto::FinMessage* Packet::mutable_fin_data() {
  // @@protoc_insertion_point(field_mutable:proto.Packet.fin_data)
  return _internal_mutable_fin_data();
}
inline void Packet::set_allocated_fin_data(::proto::FinMessage* fin_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fin_data_;
  }
  if (fin_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fin_data);
    if (message_arena != submessage_arena) {
      fin_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fin_data, submessage_arena);
    }
    
  } else {
    
  }
  fin_data_ = fin_data;
  // @@protoc_insertion_point(field_set_allocated:proto.Packet.fin_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MessageType>() {
  return ::proto::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
